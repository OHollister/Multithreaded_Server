package Multithreaded;
//12/2/2015
//Olga Hollister

import java.io.*;
import java.net.*;
import java.util.*;
import java.awt.*;

import javax.swing.*;

public class MultithreadedServer extends JFrame {
	// Text area for displaying contents
	private JTextArea jta = new JTextArea();
	Map m1 = new HashMap();

	public static void main(String[] args) {
		new MultithreadedServer();
	}

	public MultithreadedServer() {
		// Place text area on the frame
		setLayout(new BorderLayout());
		add(new JScrollPane(jta), BorderLayout.CENTER);

		setTitle("MultiThreadServer");
		setSize(500, 300);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true); // It is necessary to show the frame here!

		try {
			// Create a server socket
			ServerSocket serverSocket = new ServerSocket(8000); // where 8000 is
																// a port number
			jta.append("MultiThreadServer started at " + new Date() + '\n'); // java.util.Date.Date()

			// Number a client
			int clientNo = 1;

			while (true) {
				// Listen for a new connection request
				Socket socket = serverSocket.accept();// Listens for a connection to be made to this socket and accepts it.

				// Display the client number
				jta.append("Starting thread for client " + clientNo + " at "
						+ new Date() + '\n');

				// Find the client's host name, and IP address
				InetAddress inetAddress = socket.getInetAddress(); // java.net.InetAddress
																	// .This
																	// class
																	// represents
																	// an
																	// Internet
																	// Protocol
																	// (IP)
																	// address.

				jta.append("Client " + clientNo + "'s host name is "
						+ inetAddress.getHostName() + "\n"); // java.net.InetAddress.getHostName()
																// Gets the host name for this IP address.

				jta.append("Client " + clientNo + "'s IP Address is "
						+ inetAddress.getHostAddress() + "\n"); // Returns the  IP address string in textual presentation.

				// Create a new thread for the connection
				HandleAClient task = new HandleAClient(socket); // HandleAClient
																// is a inner
																// class

				// Start the new thread
				new Thread(task).start(); // Causes this thread to begin
											// execution; the Java Virtual
											// Machine calls the run method of
											// this thread.

				// Increment clientNo
				clientNo++;
			}
		} catch (IOException ex) {
			System.err.println(ex);
		}
	}

	// Inner class
	// Define the thread class for handling new connection
	class HandleAClient implements Runnable {
		private Socket socket; // A connected socket . A socket is an endpoint
								// for communication between two machines.

		/** Construct a thread */
		public HandleAClient(Socket socket) {
			this.socket = socket;
		}

		/** Run a thread */
		public void run() {
			try {
				// Create data input and output streams
				DataInputStream inputFromClient = new DataInputStream(
						socket.getInputStream());
				DataOutputStream outputToClient = new DataOutputStream(
						socket.getOutputStream());

				// Continuously serve the client
				while (true) {
					// Receive data from the client
					int n = inputFromClient.readInt();
					String name = inputFromClient.readUTF();
					String phone = inputFromClient.readUTF();
					String error = "Entered data does not exist:";

					switch (n) {
					case 1: // add to map

						if (m1.containsValue(name) && m1.containsValue(phone)) {
							outputToClient.writeUTF(name + phone);
						}
						m1.put(name, phone); // add name and phone to the
												// collection
						outputToClient.writeUTF(name); // Send back to the
														// client
						outputToClient.writeUTF(phone);
						jta.append("Name received from client: " + name + '\n');
						jta.append("Phone received from client: " + phone
								+ '\n');

						break;
					case 2:

						String str = (String) m1.get(name);
						if (str == null) {
							jta.append("Entered name does not exist: " + name
									+ '\n');
							outputToClient.writeUTF(error);
							outputToClient.writeUTF(error);
						} else {
							jta.append("Entered name: " + name + '\n');
							String st = (String) m1.get(phone);
							jta.append("Phone found: " + str + '\n');

							outputToClient.writeUTF(name); // Send back to the
															// client
							outputToClient.writeUTF(str);

						}
						break;

					}
					// System.out.println(m1); use to check values

				}
			} catch (IOException e) {
				System.err.println(e);
			}
		}
	}
}
 
